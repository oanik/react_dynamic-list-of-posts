{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/api.js","api/post.js","App.jsx","index.js"],"names":["PostsList","posts","selectedPostId","selectPost","className","map","post","key","id","userId","title","type","onClick","defaultProps","NewCommentForm","postId","postComment","useState","name","setName","email","setEmail","body","setNewComment","value","placeholder","onChange","target","event","preventDefault","PostDetails","postDetails","comments","removeComment","hideComment","setHideComemnt","current","length","comment","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","json","result","data","getUserPosts","getPosts","getPostComments","deletComment","commentID","method","createPost","headers","JSON","stringify","App","setPosts","setPostdetails","setComments","commentId","setCommentID","setSelectedUserID","setSelectedPostId","useEffect","a","postsFromServer","loadPosts","loadPostsbyUser","commentsFromServer","postDetailsFromServer","commentsArray","loadPostByID","reloadCommentsList","postNewComment","Number","selectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07f443f3.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, selectedPostId, selectPost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPost(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPost(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n    }),\n\n  ),\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ postId, postComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setNewComment] = useState('');\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={body}\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setNewComment(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={(event) => {\n          event.preventDefault();\n          const newComment = {\n            postId,\n            name,\n            email,\n            body,\n          };\n\n          postComment(newComment);\n\n          setNewComment('');\n          setEmail('');\n          setName('');\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  postComment: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postDetails,\n  comments, removeComment, postComment }) => {\n  const [hideComment, setHideComemnt] = useState(false);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails.title}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setHideComemnt(current => !current);\n          }}\n\n        >\n          { hideComment\n            ? `Show ${comments.length} comments`\n            : `Hide ${comments.length} comments` }\n        </button>\n\n        {!hideComment && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => {\n                  removeComment(comment.id);\n                }}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {postDetails.id && (\n          <NewCommentForm\n            postId={postDetails.id}\n            postComment={postComment}\n          />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.defaultProps = {\n  postDetails: {},\n};\nPostDetails.propTypes = {\n  postDetails: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }),\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string,\n  })).isRequired,\n  removeComment: PropTypes.func.isRequired,\n  postComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\nconst remove = url => request(url, { method: 'DELETE' });\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\nexport const getPosts = () => request('/posts ');\nexport const getPostDetails = postId => request(`/posts/${postId}`);\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\nexport const deletComment = commentID => remove(`/comments/${commentID}`);\n// eslint-disable-next-line max-len\nexport const createPost = ({ postId, name, email, body }) => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}- Error`);\n    }\n\n    return response.json();\n  });\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n// eslint-disable-next-line max-len\nimport { getPosts, getUserPosts, getPostDetails, getPostComments, deletComment, createPost } from './api/post';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [postDetails, setPostdetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentId, setCommentID] = useState(0);\n  const [userId, setSelectedUserID] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    const loadPosts = async() => {\n      const postsFromServer = await getPosts();\n\n      setPosts(postsFromServer);\n    };\n\n    loadPosts();\n  }, []);\n\n  useEffect(() => {\n    if (userId !== 0) {\n      const loadPostsbyUser = async() => {\n        const postsFromServer = await getUserPosts(userId);\n\n        setPosts(postsFromServer);\n      };\n\n      loadPostsbyUser();\n    } else {\n      const loadPosts = async() => {\n        const postsFromServer = await getPosts();\n\n        setPosts(postsFromServer);\n      };\n\n      loadPosts();\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    if (selectedPostId !== 0) {\n      const loadPostByID = async() => {\n        const commentsFromServer = getPostComments(selectedPostId);\n        const postDetailsFromServer = await getPostDetails(selectedPostId);\n        const commentsArray = await commentsFromServer;\n\n        setPostdetails(postDetailsFromServer);\n        setComments(commentsArray);\n      };\n\n      loadPostByID();\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    if (commentId !== 0) {\n      const reloadCommentsList = async() => {\n        await deletComment(commentId);\n        const commentsArray = await getPostComments(selectedPostId);\n\n        setComments(commentsArray);\n      };\n\n      reloadCommentsList();\n    }\n  }, [commentId]);\n\n  const postNewComment = async(comment) => {\n    await createPost(comment);\n    const commentsArray = await getPostComments(selectedPostId);\n\n    setComments(commentsArray);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => {\n              setSelectedUserID(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts.length > 0\n          && (\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPost={(selectedPost) => {\n              setSelectedPostId(selectedPost);\n            }}\n          />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0 && (\n          <PostDetails\n            postDetails={postDetails}\n            comments={comments}\n            removeComment={commentID => setCommentID(commentID)}\n            postComment={postNewComment}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}