{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/api.js","api/post.js","App.jsx","index.js"],"names":["PostsList","posts","selectedPostId","selectPost","className","map","post","key","id","userId","title","type","onClick","defaultProps","NewCommentForm","postId","postComment","useState","body","name","email","commentFields","setCommentFields","setForm","event","target","value","prevState","onSubmit","preventDefault","required","placeholder","onChange","PostDetails","postDetails","comments","removeComment","isCommentsVisible","setIsCommentsVisible","current","length","comment","isrequired","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","json","result","data","getPostComments","deletComment","commentID","method","createPost","headers","JSON","stringify","loadPosts","setPosts","a","postsFromServer","loadPostsbyUser","loadPostByID","setPostdetails","setComments","commentsFromServer","postDetailsFromServer","commentsArray","App","commentId","setCommentID","setSelectedUserID","setSelectedPostId","useEffect","reloadCommentsList","postNewComment","Number","selectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d70a44ba.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, selectedPostId, selectPost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPost(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPost(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n    }),\n\n  ),\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ postId, postComment }) => {\n  const [commentFields, setCommentFields] = useState({\n    body: '',\n    name: '',\n    email: '',\n  });\n\n  const resetForm = () => {\n    setCommentFields({\n      body: '',\n      name: '',\n      email: '',\n    });\n  };\n\n  const setForm = (event) => {\n    const { name, value } = event.target;\n\n    setCommentFields(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        postComment({\n          ...commentFields, postId,\n        });\n\n        resetForm();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          value={commentFields.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={setForm}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={commentFields.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={setForm}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={commentFields.body}\n          className=\"NewCommentForm__input\"\n          onChange={setForm}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  postComment: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postDetails,\n  comments, removeComment, postComment }) => {\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails.title}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsCommentsVisible(current => !current);\n          }}\n\n        >\n          { isCommentsVisible\n            ? `Show ${comments.length} comments`\n            : `Hide ${comments.length} comments` }\n        </button>\n\n        {!isCommentsVisible && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => {\n                  removeComment(comment.id);\n                }}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {postDetails.id && (\n          <NewCommentForm\n            isrequired\n            postId={postDetails.id}\n            postComment={postComment}\n          />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.defaultProps = {\n  postDetails: {},\n};\nPostDetails.propTypes = {\n  postDetails: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }),\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string,\n  })).isRequired,\n  removeComment: PropTypes.func.isRequired,\n  postComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\nconst remove = url => request(url, { method: 'DELETE' });\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\nexport const getPosts = () => request('/posts ');\nexport const getPostDetails = postId => request(`/posts/${postId}`);\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\nexport const deletComment = commentID => remove(`/comments/${commentID}`);\nexport const createPost = ({\n  postId, name, email, body,\n}) => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}- Error`);\n    }\n\n    return response.json();\n  });\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts, getPostDetails,\n  getPostComments, deletComment,\n  createPost } from './api/post';\n\nconst loadPosts = async(setPosts) => {\n  const postsFromServer = await getPosts();\n\n  setPosts(postsFromServer);\n};\n\nconst loadPostsbyUser = async(setPosts, id) => {\n  const postsFromServer = await getUserPosts(id);\n\n  setPosts(postsFromServer);\n};\n\nconst loadPostByID = async(setPostdetails, setComments, id) => {\n  const commentsFromServer = getPostComments(id);\n  const postDetailsFromServer = await getPostDetails(id);\n  const commentsArray = await commentsFromServer;\n\n  setPostdetails(postDetailsFromServer);\n  setComments(commentsArray);\n};\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [postDetails, setPostdetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentId, setCommentID] = useState(0);\n  const [userId, setSelectedUserID] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    loadPosts(setPosts);\n  }, []);\n\n  useEffect(() => {\n    if (userId !== 0) {\n      loadPostsbyUser(setPosts, userId);\n    } else {\n      loadPosts(setPosts);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    if (selectedPostId !== 0) {\n      loadPostByID(setPostdetails, setComments, selectedPostId);\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    if (commentId !== 0) {\n      const reloadCommentsList = async() => {\n        await deletComment(commentId);\n        const commentsArray = await getPostComments(selectedPostId);\n\n        setComments(commentsArray);\n      };\n\n      reloadCommentsList();\n    }\n  }, [commentId]);\n\n  const postNewComment = async(comment) => {\n    await createPost(comment);\n    const commentsArray = await getPostComments(selectedPostId);\n\n    setComments(commentsArray);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => {\n              setSelectedUserID(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts.length > 0\n          && (\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPost={(selectedPost) => {\n              setSelectedPostId(selectedPost);\n            }}\n          />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0 && (\n          <PostDetails\n            postDetails={postDetails}\n            comments={comments}\n            removeComment={commentID => setCommentID(commentID)}\n            postComment={postNewComment}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}